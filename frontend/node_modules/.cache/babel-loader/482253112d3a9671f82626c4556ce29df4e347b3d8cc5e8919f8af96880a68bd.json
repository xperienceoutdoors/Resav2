{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const activitiesApi = createApi({\n  reducerPath: 'activitiesApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${process.env.REACT_APP_API_URL}/activities`,\n    prepareHeaders: (headers, {\n      getState\n    }) => {\n      const token = getState().auth.token;\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  tagTypes: ['Activity'],\n  endpoints: builder => ({\n    getActivities: builder.query({\n      query: () => '',\n      providesTags: [{\n        type: 'Activity',\n        id: 'LIST'\n      }]\n    }),\n    getActivity: builder.query({\n      query: id => `/${id}`,\n      providesTags: (_result, _error, id) => [{\n        type: 'Activity',\n        id\n      }]\n    }),\n    createActivity: builder.mutation({\n      query: body => ({\n        url: '',\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Activity',\n        id: 'LIST'\n      }]\n    }),\n    updateActivity: builder.mutation({\n      query: ({\n        id,\n        body\n      }) => ({\n        url: `/${id}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: (_result, _error, {\n        id\n      }) => [{\n        type: 'Activity',\n        id\n      }]\n    }),\n    deleteActivity: builder.mutation({\n      query: id => ({\n        url: `/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Activity',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetActivitiesQuery,\n  useGetActivityQuery,\n  useCreateActivityMutation,\n  useUpdateActivityMutation,\n  useDeleteActivityMutation\n} = activitiesApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","activitiesApi","reducerPath","baseQuery","baseUrl","process","env","REACT_APP_API_URL","prepareHeaders","headers","getState","token","auth","set","tagTypes","endpoints","builder","getActivities","query","providesTags","type","id","getActivity","_result","_error","createActivity","mutation","body","url","method","invalidatesTags","updateActivity","deleteActivity","useGetActivitiesQuery","useGetActivityQuery","useCreateActivityMutation","useUpdateActivityMutation","useDeleteActivityMutation"],"sources":["/Users/alexis/CascadeProjects/Resav2/frontend/src/services/activities.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Activity, TagTypes } from '../types/api';\n\nexport const activitiesApi = createApi({\n  reducerPath: 'activitiesApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: `${process.env.REACT_APP_API_URL}/activities`,\n    prepareHeaders: (headers, { getState }) => {\n      const token = (getState() as any).auth.token;\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ['Activity'] as const,\n  endpoints: (builder) => ({\n    getActivities: builder.query<Activity[], void>({\n      query: () => '',\n      providesTags: [{ type: 'Activity', id: 'LIST' }],\n    }),\n    getActivity: builder.query<Activity, string>({\n      query: (id) => `/${id}`,\n      providesTags: (_result, _error, id) => [{ type: 'Activity' as const, id }],\n    }),\n    createActivity: builder.mutation<Activity, Partial<Activity>>({\n      query: (body) => ({\n        url: '',\n        method: 'POST',\n        body,\n      }),\n      invalidatesTags: [{ type: 'Activity', id: 'LIST' }],\n    }),\n    updateActivity: builder.mutation<Activity, { id: string; body: Partial<Activity> }>({\n      query: ({ id, body }) => ({\n        url: `/${id}`,\n        method: 'PUT',\n        body,\n      }),\n      invalidatesTags: (_result, _error, { id }) => [{ type: 'Activity' as const, id }],\n    }),\n    deleteActivity: builder.mutation<void, string>({\n      query: (id) => ({\n        url: `/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: [{ type: 'Activity', id: 'LIST' }],\n    }),\n  }),\n});\n\nexport const {\n  useGetActivitiesQuery,\n  useGetActivityQuery,\n  useCreateActivityMutation,\n  useUpdateActivityMutation,\n  useDeleteActivityMutation,\n} = activitiesApi;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAGxE,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;EACrCG,WAAW,EAAE,eAAe;EAC5BC,SAAS,EAAEH,cAAc,CAAC;IACxBI,OAAO,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,aAAa;IACtDC,cAAc,EAAEA,CAACC,OAAO,EAAE;MAAEC;IAAS,CAAC,KAAK;MACzC,MAAMC,KAAK,GAAID,QAAQ,CAAC,CAAC,CAASE,IAAI,CAACD,KAAK;MAC5C,IAAIA,KAAK,EAAE;QACTF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,UAAUF,KAAK,EAAE,CAAC;MACjD;MACA,OAAOF,OAAO;IAChB;EACF,CAAC,CAAC;EACFK,QAAQ,EAAE,CAAC,UAAU,CAAU;EAC/BC,SAAS,EAAGC,OAAO,KAAM;IACvBC,aAAa,EAAED,OAAO,CAACE,KAAK,CAAmB;MAC7CA,KAAK,EAAEA,CAAA,KAAM,EAAE;MACfC,YAAY,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,EAAE,EAAE;MAAO,CAAC;IACjD,CAAC,CAAC;IACFC,WAAW,EAAEN,OAAO,CAACE,KAAK,CAAmB;MAC3CA,KAAK,EAAGG,EAAE,IAAK,IAAIA,EAAE,EAAE;MACvBF,YAAY,EAAEA,CAACI,OAAO,EAAEC,MAAM,EAAEH,EAAE,KAAK,CAAC;QAAED,IAAI,EAAE,UAAmB;QAAEC;MAAG,CAAC;IAC3E,CAAC,CAAC;IACFI,cAAc,EAAET,OAAO,CAACU,QAAQ,CAA8B;MAC5DR,KAAK,EAAGS,IAAI,KAAM;QAChBC,GAAG,EAAE,EAAE;QACPC,MAAM,EAAE,MAAM;QACdF;MACF,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC;QAAEV,IAAI,EAAE,UAAU;QAAEC,EAAE,EAAE;MAAO,CAAC;IACpD,CAAC,CAAC;IACFU,cAAc,EAAEf,OAAO,CAACU,QAAQ,CAAoD;MAClFR,KAAK,EAAEA,CAAC;QAAEG,EAAE;QAAEM;MAAK,CAAC,MAAM;QACxBC,GAAG,EAAE,IAAIP,EAAE,EAAE;QACbQ,MAAM,EAAE,KAAK;QACbF;MACF,CAAC,CAAC;MACFG,eAAe,EAAEA,CAACP,OAAO,EAAEC,MAAM,EAAE;QAAEH;MAAG,CAAC,KAAK,CAAC;QAAED,IAAI,EAAE,UAAmB;QAAEC;MAAG,CAAC;IAClF,CAAC,CAAC;IACFW,cAAc,EAAEhB,OAAO,CAACU,QAAQ,CAAe;MAC7CR,KAAK,EAAGG,EAAE,KAAM;QACdO,GAAG,EAAE,IAAIP,EAAE,EAAE;QACbQ,MAAM,EAAE;MACV,CAAC,CAAC;MACFC,eAAe,EAAE,CAAC;QAAEV,IAAI,EAAE,UAAU;QAAEC,EAAE,EAAE;MAAO,CAAC;IACpD,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXY,qBAAqB;EACrBC,mBAAmB;EACnBC,yBAAyB;EACzBC,yBAAyB;EACzBC;AACF,CAAC,GAAGpC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}