{"ast":null,"code":"/**\n * @license React\n * use-sync-external-store-with-selector.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\n\"production\" !== process.env.NODE_ENV && function () {\n  function is(x, y) {\n    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;\n  }\n  \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\n  var React = require(\"react\"),\n    objectIs = \"function\" === typeof Object.is ? Object.is : is,\n    useSyncExternalStore = React.useSyncExternalStore,\n    useRef = React.useRef,\n    useEffect = React.useEffect,\n    useMemo = React.useMemo,\n    useDebugValue = React.useDebugValue;\n  exports.useSyncExternalStoreWithSelector = function (subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n    var instRef = useRef(null);\n    if (null === instRef.current) {\n      var inst = {\n        hasValue: !1,\n        value: null\n      };\n      instRef.current = inst;\n    } else inst = instRef.current;\n    instRef = useMemo(function () {\n      function memoizedSelector(nextSnapshot) {\n        if (!hasMemo) {\n          hasMemo = !0;\n          memoizedSnapshot = nextSnapshot;\n          nextSnapshot = selector(nextSnapshot);\n          if (void 0 !== isEqual && inst.hasValue) {\n            var currentSelection = inst.value;\n            if (isEqual(currentSelection, nextSnapshot)) return memoizedSelection = currentSelection;\n          }\n          return memoizedSelection = nextSnapshot;\n        }\n        currentSelection = memoizedSelection;\n        if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;\n        var nextSelection = selector(nextSnapshot);\n        if (void 0 !== isEqual && isEqual(currentSelection, nextSelection)) return memoizedSnapshot = nextSnapshot, currentSelection;\n        memoizedSnapshot = nextSnapshot;\n        return memoizedSelection = nextSelection;\n      }\n      var hasMemo = !1,\n        memoizedSnapshot,\n        memoizedSelection,\n        maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;\n      return [function () {\n        return memoizedSelector(getSnapshot());\n      }, null === maybeGetServerSnapshot ? void 0 : function () {\n        return memoizedSelector(maybeGetServerSnapshot());\n      }];\n    }, [getSnapshot, getServerSnapshot, selector, isEqual]);\n    var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);\n    useEffect(function () {\n      inst.hasValue = !0;\n      inst.value = value;\n    }, [value]);\n    useDebugValue(value);\n    return value;\n  };\n  \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\n}();","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}